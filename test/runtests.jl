using AutoregressiveConditionalBetas
using Test

@testset "AutoregressiveConditionalBetas.jl" begin
    
    y = [0.123, 0.456, 0.789, 0.101, 0.112, 0.131, 0.415, 0.161, 0.718, 0.192, 0.202, 0.212, 0.223, 0.234, 0.245, 0.256, 0.267, 0.278, 0.289, 0.290]
    X =  [ [1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0],
    [0.301, 0.312, 0.323, 0.334, 0.345, 0.356, 0.367, 0.378, 0.389, 0.390, 0.401, 0.412, 0.423, 0.434, 0.445, 0.456, 0.467, 0.478, 0.489, 0.490],
    [0.501, 0.512, 0.523, 0.534, 0.545, 0.556, 0.567, 0.578, 0.589, 0.590, 0.601, 0.612, 0.623, 0.634, 0.645, 0.656, 0.667, 0.678, 0.689, 0.690],
    [0.701, 0.712, 0.723, 0.734, 0.745, 0.756, 0.767, 0.778, 0.789, 0.790, 0.801, 0.812, 0.823, 0.834, 0.845, 0.856, 0.867, 0.878, 0.889, 0.890]]


    # X to Matrix
    X = hcat(X...)

    
    @test try
        model = ACB_model(
        y,
        X,
        0.005,  # ω_ν
        0.05,   # α_ν
        0.94,   # β_ν
        [0.001, 0.06, 0.04, 0.02],  # ω̄
        [0.0, 0.05, 0.05, 0.05],    # ξ
        [0.0, 0.94, 0.94, 0.94],    # c
        [[0.0], [0.0], [0.0], [0.0]]; # γ
        constant = false
        )
        true
    catch e
        println("Error: ", e)
        false
    end

    model = ACB_model(
        y,
        X,
        0.005,  # ω_ν
        0.05,   # α_ν
        0.94,   # β_ν
        [0.001, 0.06, 0.04, 0.02],  # ω̄
        [0.0, 0.05, 0.05, 0.05],    # ξ
        [0.0, 0.94, 0.94, 0.94],    # c
        [[0.0], [0.0], [0.0], [0.0]]; # γ
        constant = false
        )

    @test try 
        println(AutoregressiveConditionalBetas.predictions(model))

        true
    catch e
        println("Error: ", e)
        false
    end

    result = fit(obj)
    @test result.converged

end


